knitr::opts_chunk$set(echo = TRUE)
source("/media/florian/2da9b7a2-823d-44b6-97f8-993cbc54b240/Programs/Bipolar_retinal_cell_code/BipolarCell2016/class.R")
markers <- c("Cartpt")
## Rspo2,Wt1,Obox3 not in dat
VlnPlot(neurons, markers,use.raw=T)
FeaturePlot(neurons, markers,cols.use = c("grey","red"))
dot.plot(neurons, features.plot =markers, max.val.perc = 0.9, max.val.exp = 3, max.size = 10)
## Load readr library for faster table reading
library(readr)
## Load all barcodes to facilitate reading in DGE
all_barcodes <- read.table("Data/GSE93374_cell_metadata.txt",sep="\t",header=T)
barcode_IDs <- as.character(all_barcodes$X1.ID)
barcode_IDs_with_genes <- c("genes",barcode_IDs)
## Load neuronal cell barcodes
neuron_barcodes <- read_tsv(file="Data/GSE93374_neuronal_cells.tsv",col_names=F)
cells_to_filter <- neuron_barcodes[,1]
## Read in DGE matrix for all cells
unfiltered_DGE <- read_tsv("Data/GSE93374_Merged_all_020816_DGE.txt",col_names=barcode_IDs_with_genes,skip=1)
library(tidyr)
library(dplyr)
## Filter DGE for neuronal cells
neuronal_cells <- unfiltered_DGE %>%
select(one_of(cells_to_filter$X1))
neuron_colSums <- neuronal_cells /colSums(neuronal_cells)
these_sums <- colSums(neuron_colSums)
## Transform tibble into dataframe to be able to have rownames for Seurat
neuronal_cells_df <- as.data.frame(neuronal_cells)
## Set genes as rownames
rownames(neuronal_cells_df) <- unfiltered_DGE$genes
neuron_sc <- scDrop(count.data=neuronal_cells_df)
neuron_sc=initialize(neuron_sc, min.genes = 500, min.cells = 30, min.counts=60)
library(tidyr)
library(dplyr)
## Filter DGE for neuronal cells
neuronal_cells <- unfiltered_DGE %>%
select(one_of(cells_to_filter$X1))
neuron_colSums <- neuronal_cells /colSums(neuronal_cells)
these_sums <- colSums(neuron_colSums)
## Transform tibble into dataframe to be able to have rownames for Seurat
neuronal_cells_df <- as.data.frame(neuronal_cells)
## Set genes as rownames
rownames(neuronal_cells_df) <- unfiltered_DGE$genes
neuron_sc <- scDrop(count.data=neuronal_cells_df)
these_sums
hist(these_sums)
dim(neuronal_cells)
head(neuronal_cells)
col_sums <- colSums(neuronal_cells)
col_sums
hist(col_sums)
hist(log(col_sums))
hist(log10(col_sums))
head(col_sums)
head9neuron_colSums
head(neuron_colSums)
neuron_colSums <- neuronal_cells / colSums(neuronal_cells)
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))
neuron_colSums
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))
head9neuron_colSums
head(neuron_colSums)
v
neuron_colSums
these_sums <- colSums(neuron_colSums)
these_sums
hist(these_sums)
hist(neuron_colSums)
hist(neuron_colSums[,1])
hist(neuron_colSums[,2])
hist(neuron_colSums[,3])
hist(neuron_colSums[,4])
hist(neuron_colSums[,5])
hist(log(neuron_colSums[,5]))
?scale
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))*10000)
library(tidyr)
library(dplyr)
## Filter DGE for neuronal cells
neuronal_cells <- unfiltered_DGE %>%
select(one_of(cells_to_filter$X1))
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))
these_sums <- colSums(neuron_colSums)
## Transform tibble into dataframe to be able to have rownames for Seurat
neuronal_cells_df <- as.data.frame(neuronal_cells)
## Set genes as rownames
rownames(neuronal_cells_df) <- unfiltered_DGE$genes
neuron_sc <- scDrop(count.data=neuronal_cells_df)
library(tidyr)
library(dplyr)
## Filter DGE for neuronal cells
neuronal_cells <- unfiltered_DGE %>%
select(one_of(cells_to_filter$X1))
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))
these_sums <- colSums(neuron_colSums)
## Transform tibble into dataframe to be able to have rownames for Seurat
neuronal_cells_df <- as.data.frame(neuron_colSums)
## Set genes as rownames
rownames(neuronal_cells_df) <- unfiltered_DGE$genes
neuron_sc <- scDrop(count.data=neuronal_cells_df)
## Load libraries necessary for Seurat
library(Seurat)
library(dplyr)
library(Matrix)
neurons <- new("seurat", raw.data = as.matrix(neuronal_cells_df))
neurons <- Setup(neurons, min.cells = 10, min.genes = 200, do.logNormalize = T, total.expr = 1e4, project = "Neurons")
#nGene and nUMI are automatically calculated for every object by Seurat. For non-UMI data, nUMI represents the sum of the non-normalized values within a cell
# We calculate the percentage of mitochondrial genes here and store it in percent.mito using the AddMetaData. The % of UMI mapping to MT-genes is a common scRNA-seq QC metric.
mito.genes <- grep("^mt-", rownames(neurons@data), value = T)
percent.mito <- colSums(expm1(neurons@data[mito.genes, ]))/colSums(expm1(neurons@data))
#AddMetaData adds columns to object@data.info, and is a great place to stash QC stats
neurons <- AddMetaData(neurons, percent.mito, "percent.mito")
VlnPlot(neurons, c("nGene", "nUMI", "percent.mito"), nCol = 3)
#GenePlot is typically used to visualize gene-gene relationships, but can be used for anything calculated by the object, i.e. columns in object@data.info, PC scores etc.
#Since there is a rare subset of cells with an outlier level of high mitochondrial percentage, and also low UMI content, we filter these as well
par(mfrow = c(1, 2))
GenePlot(neurons, "nUMI", "percent.mito")
GenePlot(neurons, "nUMI", "nGene")
#We filter out cells that have unique gene counts over 2,500
#Note that accept.high and accept.low can be used to define a 'gate', and can filter cells not only based on nGene but on anything in the object (as in GenePlot above)
neurons <- SubsetData(neurons, subset.name = "nGene", accept.high = 5000)
neurons <- SubsetData(neurons, subset.name = "nGene", accept.low = 300)
neurons <- SubsetData(neurons, subset.name = "nUMI", accept.high = 15000,accept.low=300)
neurons <- SubsetData(neurons, subset.name = "percent.mito", accept.high = 0.10)
#note that this overwrites pbmc@scale.data. Therefore, if you intend to use RegressOut, you can set do.scale=F and do.center=F in the original object to save some time.
neurons <- RegressOut(neurons, latent.vars = c("nUMI", "percent.mito"))
neurons
#nGene and nUMI are automatically calculated for every object by Seurat. For non-UMI data, nUMI represents the sum of the non-normalized values within a cell
# We calculate the percentage of mitochondrial genes here and store it in percent.mito using the AddMetaData. The % of UMI mapping to MT-genes is a common scRNA-seq QC metric.
mito.genes <- grep("^mt-", rownames(neurons@data), value = T)
percent.mito <- colSums(expm1(neurons@data[mito.genes, ]))/colSums(expm1(neurons@data))
#AddMetaData adds columns to object@data.info, and is a great place to stash QC stats
neurons <- AddMetaData(neurons, percent.mito, "percent.mito")
VlnPlot(neurons, c("nGene", "nUMI", "percent.mito"), nCol = 3)
neurons <- new("seurat", raw.data = as.matrix(neuronal_cells_df))
neurons <- Setup(neurons, min.cells = 10, min.genes = 200, do.logNormalize = N, total.expr = 1e4, project = "Neurons")
neurons
neurons <- new("seurat", raw.data = as.matrix(neuronal_cells_df))
neurons <- Setup(neurons, min.cells = 10, min.genes = 200, do.logNormalize = N, total.expr = 1e4, project = "Neurons")
neurons <- new("seurat", raw.data = as.matrix(neuronal_cells_df))
neurons <- Setup(neurons, min.cells = 10, min.genes = 200, do.logNormalize = FALSE, total.expr = 1e4, project = "Neurons")
neurons
neurons@datahead())
head(neurons@data)
neurons@data[,1]
hist(neurons@data[,1])
hist(neurons@scale.data[,1])
colSums(neurons@scale.data[,1])
sum(neurons@scale.data[,1])
sum(neurons@scale.data[,2])
sum(neurons@scale.data[,3])
?Seurat
??Seurat
sum(neurons@data[,3])
sum(neurons@data[,2])
sum(neurons@data[,1])
neuron@data
neurons@data
neurons@data[,1]
neurons <- new("seurat", raw.data = as.matrix(neuronal_cells_df))
neurons <- Setup(neurons, min.cells = 10, min.genes = 200, do.logNormalize = TRUE, total.expr = 1e4, project = "Neurons")
neurons@data[,1]
neurons@scale.data[,1]
sum(neurons@scale.data[,1])
sum(neurons@data[,1])
sum(neurons@data[,2])
sum(neurons@data[,3])
sum(neurons@data[,4])
sum(neurons@data[,5])
sum(neurons@data[,34])
sum(neurons@data[,500])
hist(neurons@data[,500])
hist(neurons@scale.data[,500])
hist(neurons@data[,500])
neuronal_cells_df[,1]
log(neuronal_cells_df[,1])
log(neuronal_cells_df[,1])*10000
neuron_colSums_seurat_copy <- scale(neuronal_cells, center=FALSE, scale=10000)
?
neuron_colSums_seurat_copy <- scale(neuronal_cells, center=FALSE, scale=10000)
?scale
?LogNormalize
?LogNorm
??LogNorm
LogNorm(neuronal_cells_df)
Seurat::LogNorm(neuronal_cells_df)
Seurat::LogNormalize(neuronal_cells_df)
norm_df <- Seurat::LogNormalize(neuronal_cells_df)
sum(norm_df[,1])
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=1)
sum(norm_df[,1])
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=10)
sum(norm_df[,1])
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=100)
sum(norm_df[,1])
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=1000)
sum(norm_df[,1])
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=10000)
sum(norm_df[,1])
hist(norm_df[,1])
hist(log(norm_df[,1]))
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=1)
hist(log(norm_df[,1]))
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))
hist(log(neuron_colSums[,1]))
neuron_colSums <- scale(neuronal_cells*10000, center=FALSE, scale=colSums(neuronal_cells))
hist(log(neuron_colSums[,1]))
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))*10000
hist(log(neuron_colSums[,1]))
hist(log(neuron_colSums[,1]))
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))*10000
hist(log(neuron_colSums[,1]))
norm_df <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=10000)
neuron_colSums <- log(scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells)))
hist(log(neuron_colSums[,1]))
neuron_colSums <- log(scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells)))
hist(log(neuron_colSums[,1]))
hist(log(neuron_colSums[,1]))
norm_df_scale10k <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=10000)
norm_df_scale1 <- Seurat::LogNormalize(neuronal_cells_df,scale.factor=1)
plot(norm_df_scale1[,1],norm_df_scale10k[,1])
plot(log(norm_df_scale1[,1]),log(norm_df_scale10k[,1]))
plot(log10(norm_df_scale1[,1]),log10(norm_df_scale10k[,1]))
plot(ln(norm_df_scale1[,1]),ln(norm_df_scale10k[,1]))
neuron_colSums <- scale(neuronal_cells, center=FALSE, scale=colSums(neuronal_cells))*10000
these_sums <- colSums(neuron_colSums)
these_sums
plot(log10(neuron_colSums[,1]+1),log10(norm_df_scale10k[,1]))
head(neuron_colSums)
hist(log10(neuron_colSums[,1]+1)
)
sum(log10(neuron_colSums[,1]+1))
sum(neuron_colSums[,1]
)
sum(log10(neuron_colSums[,1]+1))
sum(log(neuron_colSums[,1]+1))
log(10000)
log10(10000)
log10(10000+1)
log(10000+1)
log(1)
log(00011)
log(0.0011)
plot(log10(neuron_colSums[,1]+0.00000001),log10(norm_df_scale10k[,1]))
plot(log10(neuron_colSums[,1]+1),log10(norm_df_scale10k[,1]))\
plot(log10(neuron_colSums[,1]+1),log10(norm_df_scale10k[,1])
plot(log10(neuron_colSums[,1]+1),log10(norm_df_scale10k[,1]))
plot(log10(neuron_colSums[,1]+1),log(norm_df_scale10k[,1]))
plot(log(neuron_colSums[,1]+1),log(norm_df_scale10k[,1]))
norm_df_scale10k <- Seurat::LogNormalize(neuronal_cells_df+1,scale.factor=10000)
plot(log(neuron_colSums[,1]+1),log(norm_df_scale10k[,1]))
log1()
log(1)
log(2)
log(10)
log(100)
log(1000)
log(rnorm(1,10000))
rnorm(1,10000)
rnorm(1,10000,10)
hist(rnorm(1,10000))
hist(rnorm(10000))
hist(log(rnorm(10000)))
hist(neurons@data[,1])
hist(colSums(neurons@data))
hist(colSums(neurons@scale.data))
hist(colSums(neurons@data))
hist(colSums(log(neurons@data)))
hist(log(colSums(neurons@data)))
log(10000)
hist(colSums(log(neurons@data)))
hist(colSums(log(neurons@data)))
hist(colSums(log(neurons@data)))
hist(neuronal_cells[,1])
head(neuronal_cells)
hist(neuronal_cells[,1])
dim(neuronal_cells)
hist(neuronal_cells[,2])
hist(as.numeric(neuronal_cells[,1]))
hist(as.data.frame(neuronal_cells)[,2])
hist(log(as.data.frame(neuronal_cells)[,2]))
hist(as.data.frame(neuronal_cells)[,2])
hist(log(as.data.frame(neuronal_cells)[,2]))
hist(colSums(neuronal_cells))
mean(colSums(neuronal_cells))
hist(log(colSums(neuronal_cells)))
hist(colSums(neuronal_cells))
